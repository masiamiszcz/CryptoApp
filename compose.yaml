services:
  # SQL Server (baza danych)
  sqlserver:
    build:
      context: .
      dockerfile: C:\Users\Hacce\RiderProjects\WebAppi\CryptoDbDockerService\Dockerfile.sqlserver.yml
    container_name: sqlserver
    depends_on:
      logger:
        condition: service_started
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "YourStrong@Password"
    ports:
      - "1433:1433" # Port SQL Server
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "sqlcmd -S localhost -U sa -P YourStrong@Password -Q \"SELECT 1\"" ]
      interval: 10s
      timeout: 2s
      retries: 6
      start_period: 40s
    volumes:
      - C:\data\backups:/data

  # Logger (centralne logowanie)
  logger:
    build:
      context: .
      dockerfile: ./Logger/Dockerfile
    volumes:
      - C:\data\logs:/data/logs
    container_name: logger-service
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
    ports:
      - "8500:8500" # Port Loggera
    networks:
      - app-network
  
  cryptodbdockerservice:
    build:
      context: .
      dockerfile: ./CryptoDbDockerService/Dockerfile
    volumes:
      - C:\data\backups:/data
    container_name: cryptodbservice
    depends_on:
      sqlserver:
        condition: service_healthy # Aplikacja czeka na gotowość SQL Server.
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      ConnectionStrings__DefaultConnection: "Server=sqlserver,1433;Database=CryptoDb;User=sa;Password=YourStrong@Password;TrustServerCertificate=True;"
    networks:
      - app-network
    restart: "no"
    healthcheck:
      test: ["CMD-SHELL", "sqlcmd -S sqlserver -U sa -P YourStrong@Password -d CryptoDb -Q \"SELECT 1 FROM cryptos;\" || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  # CoinGeckoDockerService (API)
  coingeckodockerservice:
    build:
      context: .
      dockerfile: ./CoinGeckoDockerService/Dockerfile
    container_name: coingecko-api
    depends_on:
      sqlserver:
        condition: service_healthy # Zależy od zdrowia SQL Server
      logger:
        condition: service_started # Zależy od Loggera
      cryptodbdockerservice:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      ConnectionStrings__DefaultConnection: "Server=sqlserver,1433;Database=CryptoDb;User=sa;Password=YourStrong@Password;TrustServerCertificate=True;"
      LoggerUrl: "http://logger-service:8500" # Dodano URL do Loggera
    ports:
      - "5000:5000"
    networks:
      - app-network

  # CurrencyService API
  currencyservice:
    build:
      context: .
      dockerfile: ./CurrencyService/Dockerfile
    container_name: currency-api
    depends_on:
      sqlserver:
        condition: service_healthy # Zależy od zdrowia SQL Server
      logger:
        condition: service_started # Zależność od Loggera
      cryptodbdockerservice:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      ConnectionStrings__DefaultConnection: "Server=sqlserver,1433;Database=CryptoDb;User=sa;Password=YourStrong@Password;TrustServerCertificate=True;"
      LoggerUrl: "http://logger-service:8500" # Dodano URL do Loggera
    ports:
      - "5010:5010"
    networks:
      - app-network

  # WebAppi
  webappi:
    build:
      context: .
      dockerfile: ./WebAppi/Dockerfile
    container_name: webappi
    depends_on:
      sqlserver:
        condition: service_healthy # Uruchomi się po SQL Server
      coingeckodockerservice:
        condition: service_started # Zależność od CoinGecko API
      currencyservice:
        condition: service_started # Zależność od Currency API
      logger:
        condition: service_started # Zależność od Loggera
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      ConnectionStrings__DefaultConnection: "Server=sqlserver,1433;Database=CryptoDb;User=sa;Password=YourStrong@Password;TrustServerCertificate=True;"
      LoggerUrl: "http://logger-service:8500" # Dodano URL do Loggera
    ports:
      - "8080:8080"
    networks:
      - app-network

  pdfservice:
    build:
      context: .
      dockerfile: PDFService/Dockerfile
    volumes:
      - C:\data\pdfs:/data/pdfs
    depends_on:
      sqlserver:
        condition: service_healthy # Zależy od zdrowia SQL Server
      logger:
        condition: service_started # Zależy od Loggera
      cryptodbdockerservice:
        condition: service_healthy # Zależy od CryptoDbService
      coingeckodockerservice:
        condition: service_started # Zależy od CoinGecko API
      currencyservice:
        condition: service_started # Zależy od Currency API
      webappi:
        condition: service_started # Zależy od WebAppi
    environment:
      ASPNETCORE_ENVIRONMENT: "Production"
      LoggerUrl: "http://logger-service:8500" # URL do Loggera
    networks:
      - app-network
      
networks:
  app-network:
    driver: bridge
    
    
