// <auto-generated />
using System;
using CryptoDbDockerService.AppDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptoDbDockerService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Crypto", b =>
                {
                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CryptoPrice")
                        .HasColumnType("money");

                    b.Property<int>("Crypto_Id")
                        .HasColumnType("int");

                    b.Property<decimal>("High24")
                        .HasColumnType("money");

                    b.Property<decimal>("Low24")
                        .HasColumnType("money");

                    b.Property<decimal>("PriceChange")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("DateTime");

                    b.HasIndex("Crypto_Id");

                    b.ToTable("Cryptos");
                });

            modelBuilder.Entity("CryptoDbDockerService.AppDb.CryptoNames", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CryptoName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("CryptoNames");
                });

            modelBuilder.Entity("CryptoDbDockerService.AppDb.CurrencyNames", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrencyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("CurrencyNames");
                });

            modelBuilder.Entity("CryptoDbDockerService.AppDb.ExchangeRates", b =>
                {
                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApiId")
                        .HasColumnType("int");

                    b.Property<string>("ExchangeRate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Id2")
                        .HasColumnType("int");

                    b.HasKey("DateTime");

                    b.HasIndex("Id");

                    b.HasIndex("Id2");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("Crypto", b =>
                {
                    b.HasOne("CryptoDbDockerService.AppDb.CryptoNames", null)
                        .WithMany()
                        .HasForeignKey("Crypto_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Crypto_CryptoNames");
                });

            modelBuilder.Entity("CryptoDbDockerService.AppDb.ExchangeRates", b =>
                {
                    b.HasOne("CryptoDbDockerService.AppDb.CurrencyNames", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ExchangeRates_Id_CurrencyNames_Id");

                    b.HasOne("CryptoDbDockerService.AppDb.CurrencyNames", null)
                        .WithMany()
                        .HasForeignKey("Id2")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ExchangeRates_Id2_CurrencyNames_Id2");
                });
#pragma warning restore 612, 618
        }
    }
}
